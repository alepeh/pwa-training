* Iteration 00 - Project Setup
Even though we want to focus on working with what "the platform" (i.e the browser)
already provides for us, there are still some external dependencies we will use
to make our lives easier. npm is best in managing those.
So as a prerequisite, we need [[https://docs.npmjs.com/downloading-and-installing-node-js-and-npm][node + npm installed]].

Next, run =npm init= to initialize project. Defaults should be fine.

Now cretae a "hello world" index.html file in the root of the project, so we have somehing to display.
Something like this is just fine:

#+begin_example html
<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <title>PWA Training</title>
  </head>
  <body>
      <h1>Hello world</h1>
  </body>
</html>
#+end_example

For local development we want to make sure that our browser is refreshed whenever
we did code changes, so let's setup [[https://www.browsersync.io][browser-sync]] to help us here:

=npm install browser-sync --save-dev=

This added the package in the dev-dependencies section, but nothing more.
In order to become useful, add the following line under scripts in our package.json.

="start": "browser-sync start server --files \"**/*.js\" --files \"**/*.html\" --files \"**/*.css\""=

The above line will start a server (port 3000 by default) and watch all js, html and css files for changes.

Test it by running npm run start.

* Iteration 01 - Web components intro
Web components is in general just a name for a set of API specifications that are implemented in modern
web browaers. They allow you to create custom HTML tags that can be used in all modern web environments
and with any JS library or framework that works with HTML.

Four specifications are central to web components:
- [[https://w3c.github.io/webcomponents/spec/custom/][Custom Elements]] Allows you to define your own html tags and their behaviour.
- [[https://w3c.github.io/webcomponents/spec/shadow/][Shadow DOM]] Allows you to attach an encapsulated "shadow" DOM to your custom elements. As this is rendered
seperately from the main DOM, scripting and styling here does not collide with the rest of the document.
- [[https://html.spec.whatwg.org/multipage/scripting.html#the-template-element/][HTML Template]] The <template> and <slot> elements allow you to create fragments of markup that are not 
interpreted by the browser during page load. You can use them to create the markup of your custom elements.
- [[https://html.spec.whatwg.org/multipage/webappapis.html#integration-with-the-javascript-module-system][ES modules]] finally a standardized way to create and reuse modular pieces of code in JS

Let's work on our first Custom Element.
We create a =src= directory to hold all our source files and put a file named =rfk-app.js= in it.
This will be the starting point for the application we are going to build.

For custom elements, there are some naming conventions to follow.
First, they need to contain a dash in their name, to distinguish them from built-in html tags.
The first part can be used as "namespace" to distinguish components shipped by different developers from one another.
This namespace part should not be shorter than 3 characters.
In our case the namespace is rfk (or whatever you want) and as its the "root" of our app, we name it rfk-app.

#+begin_example js
//rfk-app.js
class RfkApp extends HTMLElement {
    constructor() {
        super();
    }
}
window.customElements.define('rfk-app', RfkApp);
#+end_example

This code is already a valid custom element, although it does not do anything yet.
The first line in the constructor must always be the invocation of the superclass constructor.
This is specific to custom elements and required by the spec
Finally, we need to register our custom element, so that the browser knows which class realizes our
=<rfk-app>= tag when it sees it in a document.

Next, we go ahead and move our hello world greeting inside a template that we will clone in our element.

#+begin_example html
<!-- index.html -->
 <template id="app-greeting">
     <h1>Hello world</h1>
 </template>
#+end_example

As templates are inert, when you run this code, nothing is displayed in the browser.
For the greeting to be shown again, we will attach a shadow dom to our custom element and clone
this template as a child of our shadow dom.

#+begin_example js
//rfk-app.js
    constructor(){
        super();
        // Attach a new shadow root
        const root = this.attachShadow({mode: "open"});
        // Clone the template
        const template = document.getElementById("app-greeting");
        const templateContent = template.content;
        // append the template 
        root.appendChild(
            templateContent.cloneNode(true)
          );
    }
#+end_example

Finally, we need to import our new js module and include our custom element in the body of our index.html.

#+begin_example html
<rfk-app></rfk-app>
<!-- type="module" tells the browser to treat the script as an ES module -->
<script src="src/rfk-app.js" type="module"></script>
#+end_example

* Iteration 02 - Web component testing
Before we go on, we need to make sure that we can automatically test all our web components.
We'll make use of the [[https://github.com/Polymer/tools/tree/master/packages/web-component-tester][Web Component Tester]] developed by the polymer folks.

Let's add the necessary dev dependencies.

=npm install --save-dev polymer-cli @polymer/test-fixture mocha chai wct-mocha=

To test our only web component, we first create a test directory and add two files, index.html and rfk-app_test.html.
Our index.html is used to load all the test suites that we are going to create. This is very handy
as we can browse to this page at any time to see passing/failing tests in all test suites.

In order to only run the tests, we create a new script entry in package.json
="test:unit": "polymer test --module-resolution=node --npm"=

By default, wct runs tests in all browsers that are installed on the system. As this is not
what we want, we need to create a configuration file =wct.conf.json= that restricts the tests to
run on chrome only.
wct comes with a handy concept test-fixtures, that lets you define a template of content and
copy it into each test suite, so you dont't run into side effects in your tests.

In =rfk-app_test.html= we make use of the test-fixture. But as our element relies on a template definition
that is defined in the document, we need to copy the template definition to the template as well.
In a later iteration, we will improve this situation.

Here is a snippet of our first testcase:

#+begin_example html
<body>
  <template id="app-greeting">
      <h1>Hello world</h1>
  </template>
  <test-fixture id="BasicTestFixture">
    <template>
      <rfk-app></rfk-app>
    </template>
  </test-fixture>
...
  <script type="module">
    suite('rfk-app', () => {
      test('app displays greeting', () => {
        const element = fixture('BasicTestFixture');
        const elementShadowRoot = element.shadowRoot;
        const elementHeader = elementShadowRoot.querySelector('h1');
        assert.equal(elementHeader.innerHTML, 'Hello world');
      });
    });
  </script>
#+end_example

To run this test, you can either use the dedicated test script =npm run test:unit= which will only run the tests,
or you can just =npm run start= and then navigate your browser to =http://localhost:3000/test/index.html= which will
run the tests and provide a nice overview in the browser.




